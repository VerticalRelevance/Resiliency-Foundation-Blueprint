version: 1.0.0
title: App-Kubernetes (EKS)-Worker Node-EC2-Resource-High Memory Utilization
description: This Experiment will stress an EC2 instace running as a worker node in a Kubernetes cluster - by overutilizing its stress-memory
tags:
  - stress-memory
configuration:
  name_space: 'resiliency' 
  aws_region: 'us-east-1'
  test_instance_tag_key: 'tag:Name'
  test_instance_tag_value: 'placeholder.k8s.local'
  pod_name_pattern: 'pod_placeholder'
#steady-state-hypothesis:
#   title: Infrastructure is healthy
#   probes:
#   - type: probe
#     name: pods-healthy
#     tolerance: True
#     provider:
#       type: python
#       module: resiliencyvr.k8s.probes
#       func: pod_healthy
#       arguments:
#         name_space: ${name_space} 
#         health_check_port: '8080'
#         health_check_path: health
#         pod_name_pattern: ${pod_name_pattern}
#         tag_key: ${test_instance_tag_key}
#         tag_value: ${test_instance_tag_value}
#         region: ${aws_region}
method: 
#  - type: action
#    name: Establish load of 1000 tps
#    provider:
#      type: python
#      module: resiliencyvr.load.actions
#      func: load_generate
#      arguments:
#        count: 1000
  - type: action
    name: stress-instance-memory
    provider:
      type: python
      module: resiliencyvr.ec2.actions
      func: stress_memory
      arguments:
        targets:
        test_target_type: 'RANDOM'
        tag_key: ${test_instance_tag_key}
        tag_value: ${test_instance_tag_value}
        region: ${aws_region}
        duration: '300'
        number_of_workers: '1'
        memory_percentage_per_worker: '99'
    pauses:
        after: 10
#  - type: probe
#    name: load_report
#    provider:
#        type: python
#        module: resiliencyvr.load.probes
#        func: load_probe_relative
#        arguments:
#            testday: "`r format(Sys.time(), '%d %B, %Y')`"
#            minutes: 20
#            sla: '250'
#            missed_percent: 65
